/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef DARKMODESCREENVIEWBASE_HPP
#define DARKMODESCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/darkmodescreen_screen/darkModeScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/ScrollableContainer.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/widgets/graph/GraphWrapAndOverwrite.hpp>
#include <touchgfx/widgets/graph/GraphElements.hpp>
#include <touchgfx/widgets/graph/GraphLabels.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class darkModeScreenViewBase : public touchgfx::View<darkModeScreenPresenter>
{
public:
    darkModeScreenViewBase();
    virtual ~darkModeScreenViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void increaseSetVoltage()
    {
        // Override and implement this function in darkModeScreen
    }
    virtual void decreaseSetVoltage()
    {
        // Override and implement this function in darkModeScreen
    }
    virtual void increaseSetCurrent()
    {
        // Override and implement this function in darkModeScreen
    }
    virtual void decreaseSetCurrent()
    {
        // Override and implement this function in darkModeScreen
    }
    virtual void increaseSetOVP()
    {
        // Override and implement this function in darkModeScreen
    }
    virtual void decreaseSetOVP()
    {
        // Override and implement this function in darkModeScreen
    }
    virtual void increaseSetOCP()
    {
        // Override and implement this function in darkModeScreen
    }
    virtual void decreaseSetOCP()
    {
        // Override and implement this function in darkModeScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ScrollableContainer valuesContainer;
    touchgfx::ScrollableContainer graphContainer;
    touchgfx::ScalableImage valuesBackground;
    touchgfx::ScalableImage graphBackground;
    touchgfx::BoxWithBorder inputBorder;
    touchgfx::BoxWithBorder setpointBorder;
    touchgfx::BoxWithBorder protectionBorder;
    touchgfx::BoxWithBorder outputBorder;
    touchgfx::ScalableImage header;
    touchgfx::ScalableImage footer;
    touchgfx::GraphWrapAndOverwrite<100> powerGraph;
    touchgfx::GraphElementGridX powerGraphMajorXAxisGrid;
    touchgfx::GraphElementGridY powerGraphMajorYAxisGrid;
    touchgfx::GraphLabelsX powerGraphMajorXAxisLabel;
    touchgfx::GraphLabelsY powerGraphMajorYAxisLabel;
    touchgfx::GraphElementLine powerGraphLine3;
    touchgfx::PainterRGB888 powerGraphLine3Painter;
    touchgfx::GraphElementLine powerGraphLine2;
    touchgfx::PainterRGB888 powerGraphLine2Painter;
    touchgfx::GraphElementLine powerGraphLine1;
    touchgfx::PainterRGB888 powerGraphLine1Painter;
    touchgfx::ButtonWithLabel overVoltageProtectionButton;
    touchgfx::ButtonWithLabel overCurrentProtectionButton;
    touchgfx::TextAreaWithOneWildcard outVoltage;
    touchgfx::TextAreaWithOneWildcard outCurrent;
    touchgfx::TextAreaWithOneWildcard powerWatt;
    touchgfx::TextAreaWithOneWildcard powerAH;
    touchgfx::TextAreaWithOneWildcard powerWH;
    touchgfx::TextAreaWithOneWildcard inputVoltageValue;
    touchgfx::FadeAnimator< touchgfx::TextArea > inputVoltage;
    touchgfx::TextAreaWithOneWildcard vSetValue;
    touchgfx::FadeAnimator< touchgfx::TextArea > vSet;
    touchgfx::TextAreaWithOneWildcard iSetValue;
    touchgfx::FadeAnimator< touchgfx::TextArea > iSet;
    touchgfx::TextAreaWithOneWildcard ovpValue;
    touchgfx::FadeAnimator< touchgfx::TextArea > ovp;
    touchgfx::TextAreaWithOneWildcard ocpValue;
    touchgfx::FadeAnimator< touchgfx::TextArea > ocp;
    touchgfx::TextAreaWithOneWildcard ocpValue_1;
    touchgfx::FadeAnimator< touchgfx::TextArea > ocp_1;
    touchgfx::TextAreaWithOneWildcard ocpValue_1_1;
    touchgfx::FadeAnimator< touchgfx::TextArea > ocp_1_1;
    touchgfx::ButtonWithIcon decreaseVoltage;
    touchgfx::ButtonWithIcon increaseVoltage;
    touchgfx::ButtonWithIcon increaseCurrent;
    touchgfx::ButtonWithIcon decreaseCurrent;
    touchgfx::ButtonWithIcon decreaseOVP;
    touchgfx::ButtonWithIcon increaseOVP;
    touchgfx::ButtonWithIcon increaseOCP;
    touchgfx::ButtonWithIcon decreaseOCP;
    touchgfx::TextButtonStyle< touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  >  setVoltage;
    touchgfx::TextButtonStyle< touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  >  setCurrent;
    touchgfx::WildcardTextButtonStyle< touchgfx::ToggleButtonTrigger >  tempToogle;
    touchgfx::TextArea textArea1;
    touchgfx::TextArea textArea1_2;
    touchgfx::TextArea textArea1_1;
    touchgfx::TextArea textArea1_1_1;
    touchgfx::TextArea textArea2;
    touchgfx::TextArea textArea3;

    /*
     * Wildcard Buffers
     */
    static const uint16_t OUTVOLTAGE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar outVoltageBuffer[OUTVOLTAGE_SIZE];
    static const uint16_t OUTCURRENT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar outCurrentBuffer[OUTCURRENT_SIZE];
    static const uint16_t POWERWATT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar powerWattBuffer[POWERWATT_SIZE];
    static const uint16_t POWERAH_SIZE = 100;
    touchgfx::Unicode::UnicodeChar powerAHBuffer[POWERAH_SIZE];
    static const uint16_t POWERWH_SIZE = 100;
    touchgfx::Unicode::UnicodeChar powerWHBuffer[POWERWH_SIZE];
    static const uint16_t INPUTVOLTAGEVALUE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar inputVoltageValueBuffer[INPUTVOLTAGEVALUE_SIZE];
    static const uint16_t VSETVALUE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar vSetValueBuffer[VSETVALUE_SIZE];
    static const uint16_t ISETVALUE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar iSetValueBuffer[ISETVALUE_SIZE];
    static const uint16_t OVPVALUE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar ovpValueBuffer[OVPVALUE_SIZE];
    static const uint16_t OCPVALUE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar ocpValueBuffer[OCPVALUE_SIZE];
    static const uint16_t OCPVALUE_1_SIZE = 10;
    touchgfx::Unicode::UnicodeChar ocpValue_1Buffer[OCPVALUE_1_SIZE];
    static const uint16_t OCPVALUE_1_1_SIZE = 10;
    touchgfx::Unicode::UnicodeChar ocpValue_1_1Buffer[OCPVALUE_1_1_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<darkModeScreenViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<darkModeScreenViewBase, const touchgfx::AbstractDataGraph&, const touchgfx::AbstractDataGraph::GraphClickEvent&> graphClickedCallback;
    touchgfx::Callback<darkModeScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void graphClickedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphClickEvent& value);
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // DARKMODESCREENVIEWBASE_HPP
